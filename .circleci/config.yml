version: 2.1

jobs:
  lint-code:
    docker:
      - image: circleci/python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      # - restore_cache:
      #     keys:
      #       - v1-dependencies-{{ checksum "requirements.txt" }}
      #       - v1-dependencies-
      - run:
          name: install dependencies
          command: |
              make setup
              make install

      # - save_cache:
      #     paths:
      #       - ./.capstone
      #     key: v1-dependencies-{{ checksum "requirements.txt" }}
      # run lint!
      - run:
          name: Run lint
          command: |
              source ~/.capstone/bin/activate
              make lint 

  build-docker-image:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: check docker version
          command: docker --version
      - run:
          name: Build Docker Image
          command: |
              docker build -t capstone:latest .
              docker image ls
      - run:
          name: Push Docker Image
          command: |
              docker login -u $DOCKER_USER -p $DOCKER_PASS 
              docker tag capstone:latest tmorot/capstone:latest
              docker push tmorot/capstone:latest

#   create-cluster:
#     executor: aws-eks/python3
#     parameters:
#       cluster-name:
#         description: |
#           capstone-project
#         type: string
#       aws-region:
#         description: |
#           AWS region
#         type: string
#         default: "us-east-1"
#     steps:
#       - checkout
#       - aws-eks/install-aws-iam-authenticator:
#           release-tag: ''
#       - run:
#           name: Install the eksctl tool
#           command: |
#             if which eksctl > /dev/null; then
#             echo "eksctl is already installed"
#             exit 0
#             fi
#             mkdir -p eksctl_download
#             curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
#             chmod +x eksctl_download/eksctl
#             SUDO=""
#             if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
#             SUDO="sudo"
#             fi
#             $SUDO mv eksctl_download/eksctl /usr/local/bin/
#             rmdir eksctl_download
#       - aws-eks/create-cluster:
#           cluster-name: << parameters.cluster-name >>
#           skip-kubectl-install: false
#           aws-region: << parameters.aws-region >>
#           verbose: 3
#           node-type: t2.small
#           nodes-max: 2
#           ssh-access: false
#           ssh-public-key: ''
#           node-zones: us-east-1a
#           zones: us-east-1a,us-east-1b
# # the "node-zones" and "zones" above is to fix the error: Resource handler returned message: "Cannot create cluster 'capstone-project' because us-east-1e, the targeted availability zone, does not currently have sufficient capacity to support the cluster.
          
#   deploy-cluster:
#     executor: aws-eks/python3
#     parameters:
#       cluster-name:
#         description: |
#           capstone-project
#         type: string
#     steps:
#       - checkout
#       - kubernetes/install
#       - aws-eks/update-kubeconfig-with-authenticator:
#           cluster-name: << parameters.cluster-name >>
#           install-kubectl: true
#       - kubernetes/create-or-update-resource:
#           get-rollout-status: true
#           resource-file-path: eks_deployment.yml
#           resource-name: deployment/capstone-project

#   test-cluster:
#     executor: aws-eks/python3
#     parameters:
#       cluster-name:
#         description: |
#           capstone-project
#         type: string
#     steps:
#       - kubernetes/install
#       - aws-eks/update-kubeconfig-with-authenticator:
#           cluster-name: << parameters.cluster-name >>
#       - run:
#           name: Test cluster
#           command: |
#             kubectl get svc
#             kubectl get nodes
#             kubectl get pods
#             kubectl get deployment

# orbs:
#   aws-eks: circleci/aws-eks@1.0.3
#   kubernetes: circleci/kubernetes@1.0

workflows:
   deployment:
     jobs:
       - lint-code
       - build-docker-image:
          requires:
            - lint-code
#       - create-cluster:
#           cluster-name: capstone-project
#           requires: [build-docker-image]
#       - deploy-cluster:
#           cluster-name: capstone-project
#           requires: [create-cluster]
#       - test-cluster:
#           cluster-name: capstone-project
#           requires: [deploy-cluster]
  